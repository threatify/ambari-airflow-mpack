<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at
       http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<configuration supports_final="true">
  <!--Configuration options for user authentication into the web application-->
  <property>
    <name>celery_app_name</name>
    <value>airflow.executors.celery_executor</value>
    <display-name>Celery app name</display-name>
    <description>The app name that will be used by celery.</description>
  </property>
  <property>
    <name>celeryd_concurrency</name>
    <value>16</value>
    <display-name>Celeryd concurrency</display-name>
    <description>The concurrency that will be used when starting workers with the "airflow worker" command. This defines the number of task instances that a worker will take, so size up your workers based on the resources on your worker box and the nature of your tasks.</description>
  </property>
  <property>
    <name>worker_log_server_port</name>
    <value>8793</value>
    <display-name>Worker log server port</display-name>
    <description>When you start an airflow worker, airflow starts a tiny web server subprocess to serve the workers local log files to the airflow main web server, who then builds pages and sends them to users. This defines the port on which the logs are served. It needs to be unused, and open visible from the main web server to connect into the workers.</description>
  </property>
  <property>
    <name>broker_url</name>
    <value>sqla+mysql://airflow:airflow@localhost:3306/airflow</value>
    <display-name>Broker url</display-name>
    <description>The Celery broker URL. Celery supports RabbitMQ, Redis and experimentally a sqlalchemy database. Refer to the Celery documentation for more information.</description>
  </property>
  <property>
    <name>result_backend</name>
    <value>db+mysql://airflow:airflow@localhost:3306/airflow</value>
    <display-name>Celery result backend</display-name>
    <description>Another key Celery setting.</description>
  </property>
  <property>
    <name>flower_host</name>
    <value>0.0.0.0</value>
    <display-name>Flower host</display-name>
    <description>Celery Flower is a sweet UI for Celery. Airflow has a shortcut to start it `airflow flower`. This defines the IP that Celery Flower runs on.</description>
  </property>
  <property>
    <name>flower_url_prefix</name>
    <value></value>
    <display-name>Flower URL prefix</display-name>
    <description>The root URL for Flower. Ex: flower_url_prefix = /flower.</description>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
    <name>flower_port</name>
    <value>5555</value>
    <display-name>Flower port</display-name>
    <description>This defines the port that Celery Flower runs on.</description>
  </property>
  <property>
    <name>default_queue</name>
    <value>default</value>
    <display-name>Default queue</display-name>
    <description>Default queue that tasks get assigned to and that worker listen on.</description>
  </property>
  <property>
    <name>celery_config_options</name>
    <value>airflow.config_templates.default_celery.DEFAULT_CELERY_CONFIG</value>
    <display-name>Celery config options</display-name>
    <description>Import path for celery configuration options.</description>
  </property>
  <property>
    <name>ssl_active</name>
    <value>False</value>
    <display-name>SSL active</display-name>
    <description>In case of using SSL.</description>
  </property>
  <property>
    <name>ssl_key</name>
    <value></value>
    <display-name>SSL key</display-name>
    <description></description>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
    <name>ssl_cert</name>
    <value></value>
    <display-name>SSL cert</display-name>
    <description></description>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
  <property>
    <name>ssl_cacert</name>
    <value></value>
    <display-name>SSL cacert</display-name>
    <description></description>
    <value-attributes>
      <empty-value-valid>true</empty-value-valid>
    </value-attributes>
  </property>
</configuration>
